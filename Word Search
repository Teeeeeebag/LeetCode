
/*DFS
Must pass visited by reference to reduce running time.

*/
class Solution {
public:
    bool exist(vector<vector<char> > &board, string word) {
        if(word.empty())
           return 1;
        int exist = 0;
        for(int i=0; i<board.size(); ++i){
           for(int j=0; j<board[i].size(); ++j){
               if(board[i][j]==word[0]){
                  vector<int> v1(board[0].size());
                  vector<vector<int> > visited(board.size(), v1);
                  visited[i][j] = 1;
                  search(board, word, i, j, 1, visited, exist);
                  visited[i][j] = 0;
              }
              if(exist)
                 return 1;
           }
        }
        return 0;
    }
    void search(vector<vector<char> > &board, string word, int x, int y, int cur, vector<vector<int> > &visited, int &exist){
       if(exist==1 || cur==word.size()){
          exist = 1;
          return;
       }
       if(x+1<board.size()&&!visited[x+1][y])
          if(board[x+1][y]==word[cur]){
             visited[x+1][y] = 1;
             search(board, word, x+1, y, cur+1, visited, exist);
             visited[x+1][y] = 0;
          }
       if(y+1<board[x].size() && !visited[x][y+1])
          if(board[x][y+1]==word[cur]){
             visited[x][y+1] = 1;
             search(board, word, x, y+1, cur+1, visited, exist);
             visited[x][y+1] = 0;
          }
       if(x-1 >= 0 && !visited[x-1][y])
          if(board[x-1][y]==word[cur]){
             visited[x-1][y] = 1;
             search(board, word, x-1, y, cur+1, visited, exist);
             visited[x-1][y] = 0;
          }
       if(y-1>=0 && !visited[x][y-1])
          if(board[x][y-1]==word[cur]){
             visited[x][y-1] = 1;
             search(board, word, x, y-1, cur+1, visited, exist);
             visited[x][y-1] = 0;
          }
    }
};
