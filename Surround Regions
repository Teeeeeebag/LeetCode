

/* Initially whenever I set flat to 1, I break the while loop. However that will affect the future 
judge. So one way to slove that issue is let the bfs finish. Another way is clear all the visited bit after a fail search. 
The first one obviously is far more efficient than the second shceme. 
Another issue was concer case issue, when curPos[0]==0, we cannot visited curPos[0]-1.
*/
class Solution {
public:
    void solve(vector<vector<char>> &board) {
        if(board.empty())
           return;
        vector<bool> vec(board[0].size(),0);
        vector<vector<bool>> visited(board.size(), vec);
        bfs(board, visited);
    }
    void bfs(vector<vector<char>> &board, vector<vector<bool>> visited){
       
       for(int i=0; i<board.size(); ++i){
          for(int j=0; j<board[i].size(); ++j){
             if(visited[i][j]==0 && board[i][j]=='O'){
                visited[i][j] = 1;
                vector<int> pos;
                pos.push_back(i);
                pos.push_back(j);
                queue<vector<int> > q;
                vector<vector<int> > sur;
                q.push(pos);
                int flag = 0;
                sur.push_back(pos);
                while(!q.empty()){
                   vector<int> curPos = q.front();
                   q.pop();
                   if(curPos[0]==0||curPos[0]==board.size()-1||curPos[1]==0||curPos[1]==board[0].size()-1){
                      flag = 1;
                   }
                   if(curPos[0]-1>=0&&visited[curPos[0]-1][curPos[1]]==0&&board[curPos[0]-1][curPos[1]]=='O'){
                      vector<int> temp;
                      temp.push_back(curPos[0]-1);
                      temp.push_back(curPos[1]);
                      q.push(temp);
                      sur.push_back(temp);
                      visited[curPos[0]-1][curPos[1]] = 1;
                   }
                   if(curPos[0]+1<visited.size()&&visited[curPos[0]+1][curPos[1]]==0&&board[curPos[0]+1][curPos[1]]=='O'){
                      vector<int> temp;
                      temp.push_back(curPos[0]+1);
                      temp.push_back(curPos[1]);
                      q.push(temp);
                      sur.push_back(temp);
                      visited[curPos[0]+1][curPos[1]] = 1;
                   }
                   if(curPos[1]-1>=0&&visited[curPos[0]][curPos[1]-1]==0&&board[curPos[0]][curPos[1]-1]=='O'){
                      vector<int> temp;
                      temp.push_back(curPos[0]);
                      temp.push_back(curPos[1]-1);
                      q.push(temp);
                      sur.push_back(temp);
                      visited[curPos[0]][curPos[1]-1] = 1;
                   }
                   if(curPos[1]+1<visited[curPos[0]].size()&&visited[curPos[0]][curPos[1]+1]==0&&board[curPos[0]][curPos[1]+1]=='O'){
                      vector<int> temp;
                      temp.push_back(curPos[0]);
                      temp.push_back(curPos[1]+1);
                      q.push(temp);
                      sur.push_back(temp);
                      visited[curPos[0]][curPos[1]+1] = 1;
                   }
                }
                if(flag==0){
                   for(int x=0; x<sur.size(); ++x){
                      board[sur[x][0]][sur[x][1]] = 'X';
                   }
                }
             }
          }
       }
    }
    
};
