
/*Too many details need to be taken into account!*/

class Solution {
public:
    double findMedianSortedArrays(int A[], int m, int B[], int n) {
       int mid = (m+n)/2;
       if((m+n)%2 == 0){
          return 0.5*(findMedian(A, m, B, n, mid) + findMedian(A, m, B, n, mid-1));
       }
       else 
          return findMedian(A, m, B, n, mid);
    }
    int findMedian(int A[], int m, int B[], int n, int mid){
       if(m==0)
           return B[mid];
        if(n==0)
           return A[mid];
        int a = 0, b = 0;
        int array = -1;
        while(mid >= 0 ){
            if(array==-1)
               array = 0;
           if(a<m && b<n){
              if(A[a] < B[b]){
                 ++a;
                 array = 1;
              }
              else{
                 ++b;
                 array = 0;
              }
           }
           else if(a < m && b>=n){
              ++a;
              array = 1;
           }
           else if(b<n && a>=m){
              ++b;
              array = 0;
           }
           --mid;
        }
        if(array)
           return (a>0 ? A[a-1]:A[a]);
        else
           return (b>0? B[b-1]:B[b]);
    }
};

